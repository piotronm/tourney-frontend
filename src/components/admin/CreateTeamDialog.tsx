import type { FC } from 'react';
import { useState, useMemo } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Box,
  Typography,
  Alert,
  Chip,
  Avatar,
  IconButton,
  FormControlLabel,
  Switch,
  CircularProgress,
} from '@mui/material';
import { Close as CloseIcon } from '@mui/icons-material';
import { PlayerAutocomplete } from '@/components/common/PlayerAutocomplete';
import { useCreateTeam } from '@/hooks/admin/useCreateTeam';
import { useRegistrations } from '@/hooks/admin/useRegistrations';
import type { Player } from '@/types/player';
import {
  getInitials,
  generateTeamName,
  getCombinedDupr,
  formatDuprRating,
} from '@/utils/formatters';

interface CreateTeamDialogProps {
  open: boolean;
  onClose: () => void;
  tournamentId: number;
  divisionId: number;
  divisionName?: string;
}

export const CreateTeamDialog: FC<CreateTeamDialogProps> = ({
  open,
  onClose,
  tournamentId,
  divisionId,
  divisionName,
}) => {
  const [player1, setPlayer1] = useState<Player | null>(null);
  const [player2, setPlayer2] = useState<Player | null>(null);
  const [customName, setCustomName] = useState('');
  const [useCustomName, setUseCustomName] = useState(false);

  const { data: registrationsData, isLoading: loadingRegistrations } = useRegistrations(
    tournamentId,
    { divisionId }
  );

  const { mutate: createTeam, isPending, error } = useCreateTeam();

  // Extract players from registrations who don't have teams yet
  const availablePlayers = useMemo(() => {
    if (!registrationsData?.data) return [];

    // Build Player objects from registrations
    const playersMap = new Map<number, Player>();

    registrationsData.data.forEach((registration: any) => {
      // Check if player is assigned to this specific division
      const divisionAssignment = registration.divisions?.find(
        (div: any) => div.divisionId === divisionId
      );

      // Only include players who:
      // 1. Are assigned to this division
      // 2. Don't have a team in this division yet
      if (divisionAssignment && !divisionAssignment.teamId) {
        const player: Player = {
          id: registration.playerId,
          name: registration.playerName,
          email: registration.playerEmail || null,
          duprId: registration.playerDuprId || null,
          singlesRating: null,
          doublesRating: registration.playerDuprRating,
          duprRating: registration.playerDuprRating,
          phone: null,
          duprRatingUpdatedAt: null,
          createdAt: '',
          updatedAt: '',
        };
        playersMap.set(player.id, player);
      }
    });

    return Array.from(playersMap.values());
  }, [registrationsData, divisionId]);

  // Auto-generate team name from selected players
  const autoGeneratedName = useMemo(() => {
    if (!player1) return '';
    if (!player2) return player1.name; // Solo team
    return generateTeamName(player1.name, player2.name);
  }, [player1, player2]);

  // Calculate combined DUPR
  const combinedDupr = useMemo(() => {
    const players = [player1, player2].filter(Boolean) as Player[];
    if (players.length === 0) return 0;
    return getCombinedDupr(players);
  }, [player1, player2]);

  const handleSubmit = () => {
    if (!player1) return;

    const playerIds = [player1.id];
    if (player2) playerIds.push(player2.id);

    createTeam(
      {
        tournamentId,
        divisionId,
        data: {
          playerIds,
          name: useCustomName && customName ? customName : undefined,
        },
      },
      {
        onSuccess: () => {
          // Reset form
          setPlayer1(null);
          setPlayer2(null);
          setCustomName('');
          setUseCustomName(false);
          onClose();
        },
      }
    );
  };

  const handleClose = () => {
    if (!isPending) {
      setPlayer1(null);
      setPlayer2(null);
      setCustomName('');
      setUseCustomName(false);
      onClose();
    }
  };

  const teamNameToUse = useCustomName && customName ? customName : autoGeneratedName;
  const canSubmit = player1 !== null && !isPending;

  return (
    <Dialog
      open={open}
      onClose={handleClose}
      maxWidth="sm"
      fullWidth
      disableEscapeKeyDown={isPending}
    >
      <DialogTitle>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Typography variant="h6">Create Team Manually</Typography>
          <IconButton onClick={handleClose} disabled={isPending} size="small">
            <CloseIcon />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3, pt: 1 }}>
          {/* Info Alert */}
          <Alert severity="info">
            Create a team from players registered in{' '}
            <strong>{divisionName || `Division ${divisionId}`}</strong>.
            Only players without existing teams are available.
          </Alert>

          {/* Loading State */}
          {loadingRegistrations && (
            <Box sx={{ display: 'flex', justifyContent: 'center', py: 2 }}>
              <CircularProgress size={32} />
            </Box>
          )}

          {/* No Available Players Warning */}
          {!loadingRegistrations && availablePlayers.length === 0 && (
            <Alert severity="warning">
              No players available to create teams. All registered players already have teams,
              or there are no registrations yet.
            </Alert>
          )}

          {/* Player 1 Selection */}
          {!loadingRegistrations && availablePlayers.length > 0 && (
            <>
              <Box>
                <Typography variant="subtitle2" gutterBottom>
                  Player 1 (Required)
                </Typography>
                <PlayerAutocomplete
                  players={availablePlayers}
                  value={player1}
                  onChange={setPlayer1}
                  label="Select Player"
                  placeholder="Search by name..."
                  disabled={isPending}
                  excludePlayerIds={player2 ? [player2.id] : []}
                />
              </Box>

              {/* Player 2 Selection */}
              <Box>
                <Typography variant="subtitle2" gutterBottom>
                  Player 2 (Optional - for doubles)
                </Typography>
                <PlayerAutocomplete
                  players={availablePlayers}
                  value={player2}
                  onChange={setPlayer2}
                  label="Select Partner"
                  placeholder="Leave empty for solo team..."
                  disabled={!player1 || isPending}
                  excludePlayerIds={player1 ? [player1.id] : []}
                />
              </Box>
            </>
          )}

          {/* Selected Players Preview */}
          {player1 && (
            <Box
              sx={{
                p: 2,
                bgcolor: 'background.default',
                borderRadius: 1,
                border: '1px solid',
                borderColor: 'divider',
              }}
            >
              <Typography variant="subtitle2" gutterBottom>
                Selected Players
              </Typography>
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1.5 }}>
                {/* Player 1 */}
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                  <Avatar sx={{ width: 32, height: 32 }}>
                    {getInitials(player1.name)}
                  </Avatar>
                  <Box sx={{ flex: 1 }}>
                    <Typography variant="body2" fontWeight={500}>
                      {player1.name}
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      Position 1
                    </Typography>
                  </Box>
                  {player1.doublesRating && (
                    <Chip
                      label={formatDuprRating(player1.doublesRating)}
                      size="small"
                      variant="outlined"
                    />
                  )}
                </Box>

                {/* Player 2 */}
                {player2 && (
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                    <Avatar sx={{ width: 32, height: 32, bgcolor: 'secondary.main' }}>
                      {getInitials(player2.name)}
                    </Avatar>
                    <Box sx={{ flex: 1 }}>
                      <Typography variant="body2" fontWeight={500}>
                        {player2.name}
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        Position 2
                      </Typography>
                    </Box>
                    {player2.doublesRating && (
                      <Chip
                        label={formatDuprRating(player2.doublesRating)}
                        size="small"
                        variant="outlined"
                      />
                    )}
                  </Box>
                )}
              </Box>

              {/* Combined DUPR */}
              {combinedDupr > 0 && (
                <Box sx={{ mt: 2, pt: 2, borderTop: '1px solid', borderColor: 'divider' }}>
                  <Typography variant="body2" color="text.secondary">
                    Combined DUPR:{' '}
                    <Typography component="span" variant="body2" fontWeight={600} color="primary">
                      {formatDuprRating(combinedDupr)}
                    </Typography>
                  </Typography>
                </Box>
              )}
            </Box>
          )}

          {/* Team Name Section */}
          {player1 && (
            <Box>
              <FormControlLabel
                control={
                  <Switch
                    checked={useCustomName}
                    onChange={(e) => setUseCustomName(e.target.checked)}
                    disabled={isPending}
                  />
                }
                label="Use custom team name"
              />

              {useCustomName ? (
                <TextField
                  fullWidth
                  label="Custom Team Name"
                  value={customName}
                  onChange={(e) => setCustomName(e.target.value)}
                  placeholder="Enter team name..."
                  disabled={isPending}
                  sx={{ mt: 1 }}
                  helperText="Custom name will be used instead of auto-generated name"
                />
              ) : (
                <Alert severity="info" sx={{ mt: 1 }}>
                  Auto-generated name: <strong>{autoGeneratedName}</strong>
                </Alert>
              )}
            </Box>
          )}

          {/* Error Display */}
          {error && (
            <Alert severity="error">
              {error.message || 'Failed to create team. Please try again.'}
            </Alert>
          )}
        </Box>
      </DialogContent>

      <DialogActions sx={{ px: 3, pb: 2 }}>
        <Button onClick={handleClose} disabled={isPending}>
          Cancel
        </Button>
        <Button
          variant="contained"
          onClick={handleSubmit}
          disabled={!canSubmit}
        >
          {isPending ? 'Creating Team...' : 'Create Team'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};
